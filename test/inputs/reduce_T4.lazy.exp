type nat0 :: (Type -> Type) -> Type -> Type =
  lam S :: Type -> Type. lam Z. Z
type nat1 :: (Type -> Type) -> Type -> Type =
  lam S :: Type -> Type. lam Z. S Z
type add ::
  ((Type -> Type) -> Type -> Type) ->
  ((Type -> Type) -> Type -> Type) -> (Type -> Type) -> Type -> Type =
  lam P :: (Type -> Type) -> Type -> Type.
    lam Q :: (Type -> Type) -> Type -> Type. lam S :: Type -> Type.
    lam Z.
    P S (Q S Z)
type times ::
  ((Type -> Type) -> Type -> Type) ->
  ((Type -> Type) -> Type -> Type) -> (Type -> Type) -> Type -> Type =
  lam P :: (Type -> Type) -> Type -> Type.
    lam Q :: (Type -> Type) -> Type -> Type. lam S :: Type -> Type.
    lam Z.
    P (Q S) Z
type square ::
  ((Type -> Type) -> Type -> Type) -> (Type -> Type) -> Type -> Type =
  lam P :: (Type -> Type) -> Type -> Type. times P P
type nat2 :: (Type -> Type) -> Type -> Type = add nat1 nat1
type nat4 :: (Type -> Type) -> Type -> Type = square nat2
type z = int
type s :: Type -> Type = lam a. a * a
val check : times nat2 nat4 s z -> times nat4 nat2 s z
